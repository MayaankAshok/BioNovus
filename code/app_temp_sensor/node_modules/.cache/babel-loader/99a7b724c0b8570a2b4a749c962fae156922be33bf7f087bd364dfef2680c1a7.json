{"ast":null,"code":"import { _ as _asyncToGenerator, a as _regeneratorRuntime, b as _extends, c as _objectDestructuringEmpty } from './_rollupPluginBabelHelpers-4e04b055.js';\nimport { useState, useCallback } from 'react';\nimport { fromEvent } from 'file-selector';\nfunction openFileDialog(accept, multiple, callback, initializeWithCustomAttributes) {\n  // this function must be called from a user\n  // activation event (ie an onclick event)\n  // Create an input element\n  var inputElement = document.createElement('input');\n  // Hide element and append to body (required to run on iOS safari)\n  inputElement.style.display = 'none';\n  document.body.appendChild(inputElement);\n  // Set its type to file\n  inputElement.type = 'file';\n  // Set accept to the file types you want the user to select.\n  // Include both the file extension and the mime type\n  // if accept is \"*\" then dont set the accept attribute\n  if (accept !== '*') inputElement.accept = accept;\n  // Accept multiple files\n  inputElement.multiple = multiple;\n  // set onchange event to call callback when user has selected file\n  //inputElement.addEventListener('change', callback);\n  inputElement.addEventListener('change', function (arg) {\n    callback(arg);\n    // remove element\n    document.body.removeChild(inputElement);\n  });\n  if (initializeWithCustomAttributes) {\n    initializeWithCustomAttributes(inputElement);\n  }\n  // dispatch a click event to open the file dialog\n  inputElement.dispatchEvent(new MouseEvent('click'));\n}\nvar useValidators = function useValidators(_ref) {\n  var onFilesSelectedProp = _ref.onFilesSelected,\n    onFilesSuccessfullySelectedProp = _ref.onFilesSuccessfullySelected,\n    onFilesRejectedProp = _ref.onFilesRejected,\n    onClearProp = _ref.onClear,\n    validators = _ref.validators;\n  // setup validators' event handlers\n  var onFilesSelected = function onFilesSelected(data) {\n    onFilesSelectedProp == null ? void 0 : onFilesSelectedProp(data);\n    validators == null ? void 0 : validators.forEach(function (validator) {\n      validator.onFilesSelected(data);\n    });\n  };\n  var onFilesSuccessfullySelected = function onFilesSuccessfullySelected(data) {\n    onFilesSuccessfullySelectedProp == null ? void 0 : onFilesSuccessfullySelectedProp(data);\n    validators == null ? void 0 : validators.forEach(function (validator) {\n      validator.onFilesSuccessfullySelected(data);\n    });\n  };\n  var onFilesRejected = function onFilesRejected(errors) {\n    onFilesRejectedProp == null ? void 0 : onFilesRejectedProp(errors);\n    validators == null ? void 0 : validators.forEach(function (validator) {\n      validator.onFilesRejected(errors);\n    });\n  };\n  var onClear = function onClear() {\n    onClearProp == null ? void 0 : onClearProp();\n    validators == null ? void 0 : validators.forEach(function (validator) {\n      validator.onClear == null ? void 0 : validator.onClear();\n    });\n  };\n  return {\n    onFilesSelected: onFilesSelected,\n    onFilesSuccessfullySelected: onFilesSuccessfullySelected,\n    onFilesRejected: onFilesRejected,\n    onClear: onClear\n  };\n};\nfunction useFilePicker(props) {\n  var _props$accept = props.accept,\n    accept = _props$accept === void 0 ? '*' : _props$accept,\n    _props$multiple = props.multiple,\n    multiple = _props$multiple === void 0 ? true : _props$multiple,\n    _props$readAs = props.readAs,\n    readAs = _props$readAs === void 0 ? 'Text' : _props$readAs,\n    _props$readFilesConte = props.readFilesContent,\n    readFilesContent = _props$readFilesConte === void 0 ? true : _props$readFilesConte,\n    _props$validators = props.validators,\n    validators = _props$validators === void 0 ? [] : _props$validators,\n    initializeWithCustomParameters = props.initializeWithCustomParameters;\n  var _useState = useState([]),\n    plainFiles = _useState[0],\n    setPlainFiles = _useState[1];\n  var _useState2 = useState([]),\n    filesContent = _useState2[0],\n    setFilesContent = _useState2[1];\n  var _useState3 = useState([]),\n    fileErrors = _useState3[0],\n    setFileErrors = _useState3[1];\n  var _useState4 = useState(false),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  var _useValidators = useValidators(props),\n    onFilesSelected = _useValidators.onFilesSelected,\n    onFilesSuccessfullySelected = _useValidators.onFilesSuccessfullySelected,\n    onFilesRejected = _useValidators.onFilesRejected,\n    onClear = _useValidators.onClear;\n  var clear = useCallback(function () {\n    setPlainFiles([]);\n    setFilesContent([]);\n    setFileErrors([]);\n  }, []);\n  var clearWithEventListener = useCallback(function () {\n    clear();\n    onClear == null ? void 0 : onClear();\n  }, [clear, onClear]);\n  var parseFile = function parseFile(file) {\n    return new Promise( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve, reject) {\n        var reader, readStrategy, addError;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              reader = new FileReader(); //availible reader methods: readAsText, readAsBinaryString, readAsArrayBuffer, readAsDataURL\n              readStrategy = reader[\"readAs\" + readAs];\n              readStrategy.call(reader, file);\n              addError = function addError(_ref2) {\n                var others = _extends({}, (_objectDestructuringEmpty(_ref2), _ref2));\n                reject(_extends({}, others));\n              };\n              reader.onload = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      return _context.abrupt(\"return\", Promise.all(validators.map(function (validator) {\n                        return validator.validateAfterParsing(props, file, reader)[\"catch\"](function (err) {\n                          return Promise.reject(addError(err));\n                        });\n                      })).then(function () {\n                        return resolve(_extends({}, file, {\n                          content: reader.result,\n                          name: file.name,\n                          lastModified: file.lastModified\n                        }));\n                      })[\"catch\"](function () {}));\n                    case 1:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }, _callee);\n              }));\n              reader.onerror = function () {\n                addError({\n                  name: 'FileReaderError',\n                  readerError: reader.error,\n                  causedByFile: file\n                });\n              };\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  };\n  var openFilePicker = function openFilePicker() {\n    var fileExtensions = accept instanceof Array ? accept.join(',') : accept;\n    openFileDialog(fileExtensions, multiple, /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(evt) {\n        var inputElement, plainFileObjects, validationsBeforeParsing, files, validationsAfterParsing, filesContent;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              clear();\n              inputElement = evt.target;\n              plainFileObjects = inputElement.files ? Array.from(inputElement.files) : [];\n              setLoading(true);\n              _context3.next = 6;\n              return Promise.all(validators.map(function (validator) {\n                return validator.validateBeforeParsing(props, plainFileObjects)[\"catch\"](function (err) {\n                  return Array.isArray(err) ? err : [err];\n                });\n              }));\n            case 6:\n              validationsBeforeParsing = _context3.sent.flat(1).filter(Boolean);\n              setPlainFiles(plainFileObjects);\n              setFileErrors(validationsBeforeParsing);\n              if (!validationsBeforeParsing.length) {\n                _context3.next = 15;\n                break;\n              }\n              setLoading(false);\n              setPlainFiles([]);\n              onFilesRejected == null ? void 0 : onFilesRejected({\n                errors: validationsBeforeParsing\n              });\n              onFilesSelected == null ? void 0 : onFilesSelected({\n                errors: validationsBeforeParsing\n              });\n              return _context3.abrupt(\"return\");\n            case 15:\n              if (readFilesContent) {\n                _context3.next = 19;\n                break;\n              }\n              setLoading(false);\n              onFilesSelected == null ? void 0 : onFilesSelected({\n                plainFiles: plainFileObjects,\n                filesContent: []\n              });\n              return _context3.abrupt(\"return\");\n            case 19:\n              _context3.next = 21;\n              return fromEvent(evt);\n            case 21:\n              files = _context3.sent;\n              validationsAfterParsing = [];\n              _context3.next = 25;\n              return Promise.all(files.map(function (file) {\n                return parseFile(file)[\"catch\"](function (fileError) {\n                  validationsAfterParsing.push.apply(validationsAfterParsing, Array.isArray(fileError) ? fileError : [fileError]);\n                });\n              }));\n            case 25:\n              filesContent = _context3.sent;\n              setLoading(false);\n              if (!validationsAfterParsing.length) {\n                _context3.next = 34;\n                break;\n              }\n              setPlainFiles([]);\n              setFilesContent([]);\n              setFileErrors(function (errors) {\n                return [].concat(errors, validationsAfterParsing);\n              });\n              onFilesRejected == null ? void 0 : onFilesRejected({\n                errors: validationsAfterParsing\n              });\n              onFilesSelected == null ? void 0 : onFilesSelected({\n                errors: validationsBeforeParsing.concat(validationsAfterParsing)\n              });\n              return _context3.abrupt(\"return\");\n            case 34:\n              setFilesContent(filesContent);\n              setPlainFiles(plainFileObjects);\n              setFileErrors([]);\n              onFilesSuccessfullySelected == null ? void 0 : onFilesSuccessfullySelected({\n                filesContent: filesContent,\n                plainFiles: plainFileObjects\n              });\n              onFilesSelected == null ? void 0 : onFilesSelected({\n                plainFiles: plainFileObjects,\n                filesContent: filesContent\n              });\n            case 39:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }(), initializeWithCustomParameters);\n  };\n  return {\n    openFilePicker: openFilePicker,\n    filesContent: filesContent,\n    errors: fileErrors,\n    loading: loading,\n    plainFiles: plainFiles,\n    clear: clearWithEventListener\n  };\n}\n\n/**\n * A version of useFilePicker hook that keeps selected files between selections. On top of that it allows to remove files from the selection.\n */\nfunction useImperativeFilePicker(props) {\n  var _onFilesSelected = props.onFilesSelected,\n    _onFilesSuccessfullySelected = props.onFilesSuccessfullySelected,\n    validators = props.validators,\n    onFileRemoved = props.onFileRemoved;\n  var _useState = useState([]),\n    allPlainFiles = _useState[0],\n    setAllPlainFiles = _useState[1];\n  var _useState2 = useState([]),\n    allFilesContent = _useState2[0],\n    setAllFilesContent = _useState2[1];\n  var _useFilePicker = useFilePicker(_extends({}, props, {\n      onFilesSelected: function onFilesSelected(data) {\n        var _data$errors;\n        if (!_onFilesSelected) return;\n        if ((_data$errors = data.errors) != null && _data$errors.length) {\n          return _onFilesSelected(data);\n        }\n        // override the files property to return all files that were selected previously and in the current batch\n        _onFilesSelected({\n          errors: undefined,\n          plainFiles: [].concat(allPlainFiles, data.plainFiles || []),\n          filesContent: [].concat(allFilesContent, data.filesContent || [])\n        });\n      },\n      onFilesSuccessfullySelected: function onFilesSuccessfullySelected(data) {\n        setAllPlainFiles(function (previousPlainFiles) {\n          return previousPlainFiles.concat(data.plainFiles);\n        });\n        setAllFilesContent(function (previousFilesContent) {\n          return previousFilesContent.concat(data.filesContent);\n        });\n        if (!_onFilesSuccessfullySelected) return;\n        // override the files property to return all files that were selected previously and in the current batch\n        _onFilesSuccessfullySelected({\n          plainFiles: [].concat(allPlainFiles, data.plainFiles || []),\n          filesContent: [].concat(allFilesContent, data.filesContent || [])\n        });\n      }\n    })),\n    openFilePicker = _useFilePicker.openFilePicker,\n    loading = _useFilePicker.loading,\n    errors = _useFilePicker.errors,\n    clear = _useFilePicker.clear;\n  var clearAll = useCallback(function () {\n    clear();\n    // clear previous files\n    setAllPlainFiles([]);\n    setAllFilesContent([]);\n  }, [clear]);\n  var removeFileByIndex = useCallback(function (index) {\n    setAllFilesContent(function (previousFilesContent) {\n      return [].concat(previousFilesContent.slice(0, index), previousFilesContent.slice(index + 1));\n    });\n    setAllPlainFiles(function (previousPlainFiles) {\n      var removedFile = previousPlainFiles[index];\n      validators == null ? void 0 : validators.forEach(function (validator) {\n        return validator.onFileRemoved == null ? void 0 : validator.onFileRemoved(removedFile, index);\n      });\n      onFileRemoved == null ? void 0 : onFileRemoved(removedFile, index);\n      return [].concat(previousPlainFiles.slice(0, index), previousPlainFiles.slice(index + 1));\n    });\n  }, [validators, onFileRemoved]);\n  var removeFileByReference = useCallback(function (file) {\n    var index = allPlainFiles.findIndex(function (f) {\n      return f === file;\n    });\n    if (index === -1) return;\n    removeFileByIndex(index);\n  }, [removeFileByIndex, allPlainFiles]);\n  return {\n    openFilePicker: openFilePicker,\n    plainFiles: allPlainFiles,\n    filesContent: allFilesContent,\n    loading: loading,\n    errors: errors,\n    clear: clearAll,\n    removeFileByIndex: removeFileByIndex,\n    removeFileByReference: removeFileByReference\n  };\n}\nexport { useFilePicker, useImperativeFilePicker };","map":{"version":3,"names":["openFileDialog","accept","multiple","callback","initializeWithCustomAttributes","inputElement","document","createElement","style","display","body","appendChild","type","addEventListener","arg","removeChild","dispatchEvent","MouseEvent","useValidators","_ref","onFilesSelectedProp","onFilesSelected","onFilesSuccessfullySelectedProp","onFilesSuccessfullySelected","onFilesRejectedProp","onFilesRejected","onClearProp","onClear","validators","data","forEach","validator","errors","useFilePicker","props","_props$accept","_props$multiple","_props$readAs","readAs","_props$readFilesConte","readFilesContent","_props$validators","initializeWithCustomParameters","_useState","useState","plainFiles","setPlainFiles","_useState2","filesContent","setFilesContent","_useState3","fileErrors","setFileErrors","_useState4","loading","setLoading","_useValidators","clear","useCallback","clearWithEventListener","parseFile","file","Promise","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","resolve","reject","reader","readStrategy","addError","wrap","_callee2$","_context2","prev","next","FileReader","call","_ref2","others","_extends","_objectDestructuringEmpty","onload","_callee","_callee$","_context","abrupt","all","map","validateAfterParsing","err","then","content","result","name","lastModified","stop","onerror","readerError","error","causedByFile","_x","_x2","apply","arguments","openFilePicker","fileExtensions","Array","join","_ref4","_callee3","evt","plainFileObjects","validationsBeforeParsing","files","validationsAfterParsing","_callee3$","_context3","target","from","validateBeforeParsing","isArray","sent","flat","filter","Boolean","length","fromEvent","fileError","push","concat","_x3","useImperativeFilePicker","_onFilesSelected","_onFilesSuccessfullySelected","onFileRemoved","allPlainFiles","setAllPlainFiles","allFilesContent","setAllFilesContent","_useFilePicker","_data$errors","undefined","previousPlainFiles","previousFilesContent","clearAll","removeFileByIndex","index","slice","removedFile","removeFileByReference","findIndex","f"],"sources":["/home/ketaki/Desktop/dass-project-spring-2024-team-9/code/nav-bar/node_modules/use-file-picker/src/helpers/openFileDialog.ts","/home/ketaki/Desktop/dass-project-spring-2024-team-9/code/nav-bar/node_modules/use-file-picker/src/validators/useValidators.ts","/home/ketaki/Desktop/dass-project-spring-2024-team-9/code/nav-bar/node_modules/use-file-picker/src/useFilePicker.ts","/home/ketaki/Desktop/dass-project-spring-2024-team-9/code/nav-bar/node_modules/use-file-picker/src/useImperativeFilePicker.ts"],"sourcesContent":["export function openFileDialog(\n  accept: string,\n  multiple: boolean,\n  callback: (arg: Event) => void,\n  initializeWithCustomAttributes?: (arg: HTMLInputElement) => void\n): void {\n  // this function must be called from a user\n  // activation event (ie an onclick event)\n\n  // Create an input element\n  var inputElement = document.createElement('input');\n  // Hide element and append to body (required to run on iOS safari)\n  inputElement.style.display = 'none';\n  document.body.appendChild(inputElement);\n  // Set its type to file\n  inputElement.type = 'file';\n  // Set accept to the file types you want the user to select.\n  // Include both the file extension and the mime type\n  // if accept is \"*\" then dont set the accept attribute\n  if (accept !== '*') inputElement.accept = accept;\n  // Accept multiple files\n  inputElement.multiple = multiple;\n  // set onchange event to call callback when user has selected file\n  //inputElement.addEventListener('change', callback);\n  inputElement.addEventListener('change', arg => {\n    callback(arg);\n    // remove element\n    document.body.removeChild(inputElement);\n  });\n\n  if (initializeWithCustomAttributes) {\n    initializeWithCustomAttributes(inputElement);\n  }\n  // dispatch a click event to open the file dialog\n  inputElement.dispatchEvent(new MouseEvent('click'));\n}\n","import {\n  SelectedFilesOrErrors,\n  ExtractContentTypeFromConfig,\n  UseFilePickerConfig,\n  SelectedFiles,\n  FileErrors,\n} from '../interfaces';\n\nexport const useValidators = <ConfigType extends UseFilePickerConfig<CustomErrors>, CustomErrors>({\n  onFilesSelected: onFilesSelectedProp,\n  onFilesSuccessfullySelected: onFilesSuccessfullySelectedProp,\n  onFilesRejected: onFilesRejectedProp,\n  onClear: onClearProp,\n  validators,\n}: ConfigType) => {\n  // setup validators' event handlers\n  const onFilesSelected = (data: SelectedFilesOrErrors<ExtractContentTypeFromConfig<ConfigType>, CustomErrors>) => {\n    onFilesSelectedProp?.(data as any);\n    validators?.forEach(validator => {\n      validator.onFilesSelected(data as any);\n    });\n  };\n  const onFilesSuccessfullySelected = (data: SelectedFiles<ExtractContentTypeFromConfig<ConfigType>>) => {\n    onFilesSuccessfullySelectedProp?.(data as any);\n    validators?.forEach(validator => {\n      validator.onFilesSuccessfullySelected(data);\n    });\n  };\n  const onFilesRejected = (errors: FileErrors<CustomErrors>) => {\n    onFilesRejectedProp?.(errors);\n    validators?.forEach(validator => {\n      validator.onFilesRejected(errors);\n    });\n  };\n  const onClear = () => {\n    onClearProp?.();\n    validators?.forEach(validator => {\n      validator.onClear?.();\n    });\n  };\n\n  return {\n    onFilesSelected,\n    onFilesSuccessfullySelected,\n    onFilesRejected,\n    onClear,\n  };\n};\n","import { useState, useCallback } from 'react';\nimport { fromEvent, FileWithPath } from 'file-selector';\nimport {\n  UseFilePickerConfig,\n  FileContent,\n  FilePickerReturnTypes,\n  UseFilePickerError,\n  ReaderMethod,\n  ExtractContentTypeFromConfig,\n} from './interfaces';\nimport { openFileDialog } from './helpers/openFileDialog';\nimport { useValidators } from './validators/useValidators';\n\nfunction useFilePicker<\n  CustomErrors = unknown,\n  ConfigType extends UseFilePickerConfig<CustomErrors> = UseFilePickerConfig<CustomErrors>\n>(props: ConfigType): FilePickerReturnTypes<ExtractContentTypeFromConfig<ConfigType>, CustomErrors> {\n  const {\n    accept = '*',\n    multiple = true,\n    readAs = 'Text',\n    readFilesContent = true,\n    validators = [],\n    initializeWithCustomParameters,\n  } = props;\n\n  const [plainFiles, setPlainFiles] = useState<File[]>([]);\n  const [filesContent, setFilesContent] = useState<FileContent<ExtractContentTypeFromConfig<ConfigType>>[]>([]);\n  const [fileErrors, setFileErrors] = useState<UseFilePickerError<CustomErrors>[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const { onFilesSelected, onFilesSuccessfullySelected, onFilesRejected, onClear } =\n    useValidators<ConfigType, CustomErrors>(props);\n\n  const clear: () => void = useCallback(() => {\n    setPlainFiles([]);\n    setFilesContent([]);\n    setFileErrors([]);\n  }, []);\n\n  const clearWithEventListener: () => void = useCallback(() => {\n    clear();\n    onClear?.();\n  }, [clear, onClear]);\n\n  const parseFile = (file: FileWithPath) =>\n    new Promise<FileContent<ExtractContentTypeFromConfig<ConfigType>>>(\n      async (\n        resolve: (fileContent: FileContent<ExtractContentTypeFromConfig<ConfigType>>) => void,\n        reject: (reason: UseFilePickerError) => void\n      ) => {\n        const reader = new FileReader();\n\n        //availible reader methods: readAsText, readAsBinaryString, readAsArrayBuffer, readAsDataURL\n        const readStrategy = reader[`readAs${readAs}` as ReaderMethod] as typeof reader.readAsText;\n        readStrategy.call(reader, file);\n\n        const addError = ({ ...others }: UseFilePickerError) => {\n          reject({ ...others });\n        };\n\n        reader.onload = async () =>\n          Promise.all(\n            validators.map(validator =>\n              validator.validateAfterParsing(props, file, reader).catch(err => Promise.reject(addError(err)))\n            )\n          )\n            .then(() =>\n              resolve({\n                ...file,\n                content: reader.result as string,\n                name: file.name,\n                lastModified: file.lastModified,\n              } as FileContent<ExtractContentTypeFromConfig<ConfigType>>)\n            )\n            .catch(() => {});\n\n        reader.onerror = () => {\n          addError({ name: 'FileReaderError', readerError: reader.error, causedByFile: file });\n        };\n      }\n    );\n\n  const openFilePicker = () => {\n    const fileExtensions = accept instanceof Array ? accept.join(',') : accept;\n    openFileDialog(\n      fileExtensions,\n      multiple,\n      async evt => {\n        clear();\n        const inputElement = evt.target as HTMLInputElement;\n        const plainFileObjects = inputElement.files ? Array.from(inputElement.files) : [];\n\n        setLoading(true);\n\n        const validationsBeforeParsing = (\n          await Promise.all(\n            validators.map(validator =>\n              validator\n                .validateBeforeParsing(props, plainFileObjects)\n                .catch((err: UseFilePickerError | UseFilePickerError[]) => (Array.isArray(err) ? err : [err]))\n            )\n          )\n        )\n          .flat(1)\n          .filter(Boolean) as UseFilePickerError<CustomErrors>[];\n\n        setPlainFiles(plainFileObjects);\n        setFileErrors(validationsBeforeParsing);\n        if (validationsBeforeParsing.length) {\n          setLoading(false);\n          setPlainFiles([]);\n          onFilesRejected?.({ errors: validationsBeforeParsing });\n          onFilesSelected?.({ errors: validationsBeforeParsing });\n          return;\n        }\n\n        if (!readFilesContent) {\n          setLoading(false);\n          onFilesSelected?.({ plainFiles: plainFileObjects, filesContent: [] });\n          return;\n        }\n\n        const files = (await fromEvent(evt)) as FileWithPath[];\n\n        const validationsAfterParsing: UseFilePickerError<CustomErrors>[] = [];\n        const filesContent = (await Promise.all(\n          files.map(file =>\n            parseFile(file).catch(\n              (fileError: UseFilePickerError<CustomErrors> | UseFilePickerError<CustomErrors>[]) => {\n                validationsAfterParsing.push(...(Array.isArray(fileError) ? fileError : [fileError]));\n              }\n            )\n          )\n        )) as FileContent<ExtractContentTypeFromConfig<ConfigType>>[];\n        setLoading(false);\n\n        if (validationsAfterParsing.length) {\n          setPlainFiles([]);\n          setFilesContent([]);\n          setFileErrors(errors => [...errors, ...validationsAfterParsing]);\n          onFilesRejected?.({ errors: validationsAfterParsing });\n          onFilesSelected?.({\n            errors: validationsBeforeParsing.concat(validationsAfterParsing),\n          });\n          return;\n        }\n\n        setFilesContent(filesContent);\n        setPlainFiles(plainFileObjects);\n        setFileErrors([]);\n        onFilesSuccessfullySelected?.({ filesContent: filesContent, plainFiles: plainFileObjects });\n        onFilesSelected?.({\n          plainFiles: plainFileObjects,\n          filesContent: filesContent,\n        });\n      },\n      initializeWithCustomParameters\n    );\n  };\n\n  return {\n    openFilePicker,\n    filesContent,\n    errors: fileErrors,\n    loading,\n    plainFiles,\n    clear: clearWithEventListener,\n  };\n}\n\nexport default useFilePicker;\n","import { useCallback, useState } from 'react';\nimport {\n  ExtractContentTypeFromConfig,\n  FileContent,\n  ImperativeFilePickerReturnTypes,\n  SelectedFiles,\n  SelectedFilesOrErrors,\n  useImperativeFilePickerConfig,\n} from './interfaces';\nimport useFilePicker from './useFilePicker';\n\n/**\n * A version of useFilePicker hook that keeps selected files between selections. On top of that it allows to remove files from the selection.\n */\nfunction useImperativeFilePicker<\n  CustomErrors = unknown,\n  ConfigType extends useImperativeFilePickerConfig<CustomErrors> = useImperativeFilePickerConfig<CustomErrors>\n>(props: ConfigType): ImperativeFilePickerReturnTypes<ExtractContentTypeFromConfig<ConfigType>, CustomErrors> {\n  const { onFilesSelected, onFilesSuccessfullySelected, validators, onFileRemoved } = props;\n\n  const [allPlainFiles, setAllPlainFiles] = useState<File[]>([]);\n  const [allFilesContent, setAllFilesContent] = useState<FileContent<ExtractContentTypeFromConfig<ConfigType>>[]>([]);\n\n  const { openFilePicker, loading, errors, clear } = useFilePicker<CustomErrors, ConfigType>({\n    ...props,\n    onFilesSelected: (data: SelectedFilesOrErrors<ExtractContentTypeFromConfig<ConfigType>, CustomErrors>) => {\n      if (!onFilesSelected) return;\n      if (data.errors?.length) {\n        return onFilesSelected(data);\n      }\n      // override the files property to return all files that were selected previously and in the current batch\n      onFilesSelected({\n        errors: undefined,\n        plainFiles: [...allPlainFiles, ...(data.plainFiles || [])],\n        filesContent: [...allFilesContent, ...(data.filesContent || [])] as any,\n      });\n    },\n    onFilesSuccessfullySelected: (data: SelectedFiles<any>) => {\n      setAllPlainFiles(previousPlainFiles => previousPlainFiles.concat(data.plainFiles));\n      setAllFilesContent(previousFilesContent => previousFilesContent.concat(data.filesContent));\n\n      if (!onFilesSuccessfullySelected) return;\n      // override the files property to return all files that were selected previously and in the current batch\n      onFilesSuccessfullySelected({\n        plainFiles: [...allPlainFiles, ...(data.plainFiles || [])],\n        filesContent: [...allFilesContent, ...(data.filesContent || [])],\n      });\n    },\n  });\n\n  const clearAll = useCallback(() => {\n    clear();\n    // clear previous files\n    setAllPlainFiles([]);\n    setAllFilesContent([]);\n  }, [clear]);\n\n  const removeFileByIndex = useCallback(\n    (index: number) => {\n      setAllFilesContent(previousFilesContent => [\n        ...previousFilesContent.slice(0, index),\n        ...previousFilesContent.slice(index + 1),\n      ]);\n      setAllPlainFiles(previousPlainFiles => {\n        const removedFile = previousPlainFiles[index];\n        validators?.forEach(validator => validator.onFileRemoved?.(removedFile, index));\n        onFileRemoved?.(removedFile, index);\n        return [...previousPlainFiles.slice(0, index), ...previousPlainFiles.slice(index + 1)];\n      });\n    },\n    [validators, onFileRemoved]\n  );\n\n  const removeFileByReference = useCallback(\n    (file: File) => {\n      const index = allPlainFiles.findIndex(f => f === file);\n      if (index === -1) return;\n      removeFileByIndex(index);\n    },\n    [removeFileByIndex, allPlainFiles]\n  );\n\n  return {\n    openFilePicker,\n    plainFiles: allPlainFiles,\n    filesContent: allFilesContent,\n    loading,\n    errors,\n    clear: clearAll,\n    removeFileByIndex,\n    removeFileByReference,\n  };\n}\n\nexport default useImperativeFilePicker;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}